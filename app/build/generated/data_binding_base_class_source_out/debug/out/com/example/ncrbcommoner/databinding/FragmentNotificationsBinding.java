// Generated by view binder compiler. Do not edit!
package com.example.ncrbcommoner.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.ScrollView;
import android.widget.TextView;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.ncrbcommoner.R;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentNotificationsBinding implements ViewBinding {
  @NonNull
  private final ScrollView rootView;

  @NonNull
  public final TextView appoint;

  @NonNull
  public final TextView firtext;

  @NonNull
  public final RecyclerView recycleviewAppoint;

  @NonNull
  public final RecyclerView recycleviewNotify;

  private FragmentNotificationsBinding(@NonNull ScrollView rootView, @NonNull TextView appoint,
      @NonNull TextView firtext, @NonNull RecyclerView recycleviewAppoint,
      @NonNull RecyclerView recycleviewNotify) {
    this.rootView = rootView;
    this.appoint = appoint;
    this.firtext = firtext;
    this.recycleviewAppoint = recycleviewAppoint;
    this.recycleviewNotify = recycleviewNotify;
  }

  @Override
  @NonNull
  public ScrollView getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentNotificationsBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentNotificationsBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_notifications, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentNotificationsBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.appoint;
      TextView appoint = ViewBindings.findChildViewById(rootView, id);
      if (appoint == null) {
        break missingId;
      }

      id = R.id.firtext;
      TextView firtext = ViewBindings.findChildViewById(rootView, id);
      if (firtext == null) {
        break missingId;
      }

      id = R.id.recycleview_appoint;
      RecyclerView recycleviewAppoint = ViewBindings.findChildViewById(rootView, id);
      if (recycleviewAppoint == null) {
        break missingId;
      }

      id = R.id.recycleview_notify;
      RecyclerView recycleviewNotify = ViewBindings.findChildViewById(rootView, id);
      if (recycleviewNotify == null) {
        break missingId;
      }

      return new FragmentNotificationsBinding((ScrollView) rootView, appoint, firtext,
          recycleviewAppoint, recycleviewNotify);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
